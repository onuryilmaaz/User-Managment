import User from "../models/User.js";
import bcrypt from "bcryptjs";

// ðŸ“Œ KULLANICI BÄ°LGÄ°LERÄ°NÄ° AL: /api/user/me
export const getMe = async (req, res) => {
  try {
    const user = req.user;
    res.status(200).json({
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        username: user.username,
        role: user.role,
        isVerified: user.isVerified,
        isActive: user.isActive,
        bio: user.bio,
        location: user.location,
        social: user.social,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ PROFÄ°L GÃœNCELLEME: /api/user/update-profile
export const updateProfile = async (req, res) => {
  try {
    const user = req.user;

    // Gelen isteÄŸin body'sinden `profilePicture`'Ä± da alÄ±yoruz
    const { name, surname, bio, location, social, profilePicture, phone } = req.body;

    if (name) user.name = name;
    if (surname) user.surname = surname;
    if (bio) user.bio = bio;
    if (phone) user.phone = phone; // Phone alanÄ± eklendi
    if (location) user.location = location;
    if (social) user.social = social;

    // EÄŸer frontend'den bir profilePicture URL'i geldiyse, onu kullanÄ±cÄ±ya ata
    // EÄŸer gelmediyse, mevcut deÄŸeri koru
    if (typeof profilePicture !== "undefined") {
      user.profilePicture = profilePicture;
    }

    // DeÄŸiÅŸiklikleri veritabanÄ±na kaydet
    const updatedUser = await user.save();

    res.status(200).json({ message: "Profil gÃ¼ncellendi", user: updatedUser });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ KULLANICI LÄ°STESÄ°: /api/user/list (Admin ve ModeratÃ¶r iÃ§in)
export const getUserList = async (req, res) => {
  try {
    const users = await User.find({}).select(
      "-password -resetPasswordToken -resetPasswordExpire -refreshTokens"
    );
    res.status(200).json({ users });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ KULLANICI SÄ°L: /api/user/delete/:id (Admin ve ModeratÃ¶r iÃ§in)
export const deleteUser = async (req, res) => {
  try {
    const { id } = req.params;

    // Kendi kendini silmeyi engelle
    if (req.user._id.toString() === id) {
      return res.status(400).json({ message: "Kendi hesabÄ±nÄ±zÄ± silemezsiniz" });
    }

    const userToDelete = await User.findById(id);
    if (!userToDelete) {
      return res.status(404).json({ message: "KullanÄ±cÄ± bulunamadÄ±" });
    }

    // ModeratÃ¶r admin'i silemez
    if (req.user.role === "Moderator" && userToDelete.role === "Admin") {
      return res
        .status(403)
        .json({ message: "ModeratÃ¶r admin kullanÄ±cÄ±larÄ± silemez" });
    }

    await User.findByIdAndDelete(id);
    res.status(200).json({ message: "KullanÄ±cÄ± baÅŸarÄ±yla silindi" });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ KULLANICI AKTÄ°F/PASÄ°F YAPMA: /api/user/toggle-status/:id (Admin ve ModeratÃ¶r iÃ§in)
export const toggleUserStatus = async (req, res) => {
  try {
    const { id } = req.params;

    // Kendi durumunu deÄŸiÅŸtirmeyi engelle
    if (req.user._id.toString() === id) {
      return res
        .status(400)
        .json({ message: "Kendi hesabÄ±nÄ±zÄ±n durumunu deÄŸiÅŸtiremezsiniz" });
    }

    const userToUpdate = await User.findById(id);
    if (!userToUpdate) {
      return res.status(404).json({ message: "KullanÄ±cÄ± bulunamadÄ±" });
    }

    // ModeratÃ¶r admin'in durumunu deÄŸiÅŸtiremez
    if (req.user.role === "Moderator" && userToUpdate.role === "Admin") {
      return res.status(403).json({
        message: "ModeratÃ¶r admin kullanÄ±cÄ±larÄ±nÄ±n durumunu deÄŸiÅŸtiremez",
      });
    }

    userToUpdate.isActive = !userToUpdate.isActive;
    await userToUpdate.save();

    res.status(200).json({
      message: `KullanÄ±cÄ± ${userToUpdate.isActive ? "aktif" : "pasif"} yapÄ±ldÄ±`,
      user: {
        id: userToUpdate._id,
        name: userToUpdate.name,
        email: userToUpdate.email,
        isActive: userToUpdate.isActive,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ KULLANICI ROLÃœ DEÄžÄ°ÅžTÄ°RME: /api/user/change-role/:id (Sadece Admin iÃ§in)
export const changeUserRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    // GeÃ§erli roller kontrolÃ¼
    if (!["User", "Moderator"].includes(role)) {
      return res.status(400).json({
        message: "GeÃ§ersiz rol. Sadece 'User' veya 'Moderator' olabilir",
      });
    }

    // Kendi rolÃ¼nÃ¼ deÄŸiÅŸtirmeyi engelle
    if (req.user._id.toString() === id) {
      return res
        .status(400)
        .json({ message: "Kendi rolÃ¼nÃ¼zÃ¼ deÄŸiÅŸtiremezsiniz" });
    }

    const userToUpdate = await User.findById(id);
    if (!userToUpdate) {
      return res.status(404).json({ message: "KullanÄ±cÄ± bulunamadÄ±" });
    }

    // Admin rolÃ¼nÃ¼ deÄŸiÅŸtirmeyi engelle
    if (userToUpdate.role === "Admin") {
      return res
        .status(403)
        .json({ message: "Admin kullanÄ±cÄ±larÄ±nÄ±n rolÃ¼ deÄŸiÅŸtirilemez" });
    }

    userToUpdate.role = role;
    await userToUpdate.save();

    res.status(200).json({
      message: `KullanÄ±cÄ± rolÃ¼ ${role} olarak gÃ¼ncellendi`,
      user: {
        id: userToUpdate._id,
        name: userToUpdate.name,
        email: userToUpdate.email,
        role: userToUpdate.role,
      },
    });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};

// ðŸ“Œ ÅžÄ°FRE DEÄžÄ°ÅžTÄ°R: /api/user/change-password
// Åžifre validasyon fonksiyonu - dosyanÄ±n baÅŸÄ±na ekle
const validatePassword = (password) => {
  if (password.length < 8) {
    return "Åžifre en az 8 karakter olmalÄ±";
  }
  
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]).{8,}$/;
  if (!passwordRegex.test(password)) {
    return "Åžifre en az bir bÃ¼yÃ¼k harf, bir kÃ¼Ã§Ã¼k harf, bir rakam ve bir Ã¶zel karakter iÃ§ermelidir";
  }
  
  return null;
};

// changePassword fonksiyonunu gÃ¼ncelle
export const changePassword = async (req, res) => {
  try {
    const { currentPassword, newPassword } = req.body;
    const userId = req.user._id;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({
        message: "Mevcut ÅŸifre ve yeni ÅŸifre gerekli",
      });
    }

    // Åžifre validasyonu
    const passwordError = validatePassword(newPassword);
    if (passwordError) {
      return res.status(400).json({ message: passwordError });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({
        message: "Yeni ÅŸifre en az 6 karakter olmalÄ±dÄ±r",
      });
    }

    // KullanÄ±cÄ±yÄ± bul (ÅŸifre dahil)
    const user = await User.findById(userId).select("+password");
    if (!user) {
      return res.status(404).json({ message: "KullanÄ±cÄ± bulunamadÄ±" });
    }

    // Mevcut ÅŸifreyi kontrol et
    const isCurrentPasswordValid = await bcrypt.compare(
      currentPassword,
      user.password
    );
    if (!isCurrentPasswordValid) {
      return res.status(400).json({ message: "Mevcut ÅŸifre hatalÄ±" });
    }

    // Yeni ÅŸifreyi hash'le
    const hashedNewPassword = await bcrypt.hash(newPassword, 10);

    // Åžifreyi gÃ¼ncelle
    user.password = hashedNewPassword;
    await user.save();

    res.status(200).json({ message: "Åžifre baÅŸarÄ±yla deÄŸiÅŸtirildi" });
  } catch (err) {
    res.status(500).json({ message: "Sunucu hatasÄ±", error: err.message });
  }
};
